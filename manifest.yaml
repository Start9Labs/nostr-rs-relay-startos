id: nostr
title: "Nostr RS Relay"
version: 0.7.16
release-notes: |
  * Initial release of nostr-rs-relay for embassyOS
license: mit
wrapper-repo: "https://github.com/Start9Labs/nostr-rs-relay-wrapper"
upstream-repo: "https://sr.ht/~gheartsfield/nostr-rs-relay/"
support-site: "https://todo.sr.ht/~gheartsfield/nostr-rs-relay"
marketing-site: "https://nostr.com/"
build: ["make"]
description:
  short:  A Nostr relay, written in Rust.
  long: |
    This is a Nostr relay, written in Rust. It currently supports the entire relay protocol, and persists data with SQLite.
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    main: /data
health-checks:
  main:
    name: Websocket Server
    success-message: The Nostr websocket server is alive and listening for connections.
    type: script
config:
  get:
    type: script
  set:
    type: script
properties:
  type: script
volumes:
  main:
    type: data
interfaces:
  websocket:
    name: Websocket Interface
    description: Nostr websocket relay interface
    tor-config:
      port-mapping:
        80: "8080"
    lan-config:
      443:
        ssl: true
        internal: 8080
    ui: false
    protocols:
      - tcp
      - http
      - electrum
alerts: {}
dependencies: {}
  # btc-rpc-proxy:
  #   version: ">=0.3.2.1 <0.4.0"
  #   requirement:
  #     type: "opt-out"
  #     how: Set "Bitcoin Core" to 'Bitcoin Core'"
  #   description: Provides bitcoin rpc interface needed for info about fees, blockchain, mempool, network, and transactions. Can also use bitcoind for rpc interface, or an external node for both.
  #   config:
  #     check:
  #       type: script
  #     auto-configure:
  #       type: script
  # bitcoind:
  #   version: ">=0.21.1.2 <26.0.0"
  #   requirement:
  #     type: "opt-out"
  #     how: Set "Bitcoin Core" type to "External"
  #   description: Needed for peer interface and rpc interface. Can also use btc-rpc-proxy for rpc interface, or an external node for both.
  #   config:
  #     check:
  #       type: script
  #     auto-configure:
  #       type: script
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /data
    mounts:
      BACKUP: /mnt/backup
      main: /data
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /data
    mounts:
      BACKUP: /mnt/backup
      main: /data
migrations:
  from:
    "*":
      type: script
      args: ["from"]
  to:
    "*":
      type: script
      args: ["to"]
